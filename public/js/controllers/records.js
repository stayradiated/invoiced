// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Records,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Records = (function(_super) {
    __extends(Records, _super);

    Records.prototype.template = {
      missing: new Base.View('record.missing'),
      record: new Base.View('record')
    };

    Records.prototype.elements = {
      '.table-body': 'table'
    };

    Records.prototype.events = {
      'click .hide': 'hide',
      'click .toggle-missing': 'toggleMissing'
    };

    function Records() {
      this.render = __bind(this.render, this);
      this.toggleMissing = __bind(this.toggleMissing, this);
      this.hide = __bind(this.hide, this);
      this.show = __bind(this.show, this);
      Records.__super__.constructor.apply(this, arguments);
      this.showMissing = false;
    }

    Records.prototype.show = function() {
      this.render();
      return this.el.show();
    };

    Records.prototype.hide = function() {
      return this.el.hide();
    };

    Records.prototype.toggleMissing = function() {
      this.showMissing = !this.showMissing;
      return this.render();
    };

    Records.prototype.render = function() {
      var html, lastId,
        _this = this;
      html = '';
      lastId = false;
      return storage.getInvoices().then(function(invoices) {
        var id, invoice, _i, _j, _len, _ref, _ref1;
        for (_i = 0, _len = invoices.length; _i < _len; _i++) {
          invoice = invoices[_i];
          if (_this.showMissing && lastId) {
            for (id = _j = _ref = lastId - 1, _ref1 = invoice.id + 1; _j >= _ref1; id = _j += -1) {
              html += _this.template.missing.render({
                id: id
              });
            }
          }
          html += _this.template.record.render(invoice);
          lastId = invoice.id;
        }
        return _this.table.html(html);
      });
    };

    return Records;

  })(Base.Controller);

  module.exports = Records;

}).call(this);
