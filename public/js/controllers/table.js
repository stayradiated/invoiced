// Generated by CoffeeScript 1.6.3
(function() {
  var $, Base, Rows, Table, TableRow,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  $ = require('jqueryify');

  TableRow = require('../controllers/table.row');

  Rows = require('../models/row');

  Table = (function(_super) {
    __extends(Table, _super);

    Table.prototype.elements = {
      '.rows': 'table'
    };

    Table.prototype.events = {
      'click .add-row': 'createRow',
      'keydown input': 'keydown'
    };

    function Table() {
      this.keydown = __bind(this.keydown, this);
      this.createRow = __bind(this.createRow, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      this.removeRow = __bind(this.removeRow, this);
      this.addRow = __bind(this.addRow, this);
      var _this = this;
      Table.__super__.constructor.apply(this, arguments);
      this.count = 1;
      this.rows = new Rows();
      this.rows.on('create:model', this.addRow);
      this.rows.on('destroy:model', this.removeRow);
      this.rows.on('change', this.update);
      this.rows.on('refresh', this.render);
      $(this.table).sortable({
        axis: 'y',
        handle: '.handle',
        items: 'li',
        stop: function(e, ui) {
          var index, row;
          row = ui.item.data('item');
          index = ui.item.index();
          return _this.rows.move(row, index);
        }
      });
    }

    Table.prototype.addRow = function(row, opts) {
      var view;
      if (opts == null) {
        opts = {};
      }
      view = row.view = new TableRow({
        row: row
      });
      view.el = $(view.render());
      view.el.data('item', row);
      this.table.append(view.el);
      view.bind();
      if (!opts.nofocus) {
        return view.focus();
      }
    };

    Table.prototype.removeRow = function(row) {
      return row.view.el.remove();
    };

    Table.prototype.update = function() {
      var _this = this;
      this.count = 1;
      return this.rows.forEach(function(row) {
        if (row.type === 'number') {
          return row.number = _this.count++;
        }
      });
    };

    Table.prototype.render = function() {
      var _this = this;
      this.table.empty();
      return this.rows.forEach(function(row) {
        return _this.addRow(row, {
          nofocus: true
        });
      });
    };

    Table.prototype.createRow = function(e) {
      var details, type, types, _i, _len;
      if (e.target != null) {
        types = ['bullet', 'heading', 'section', 'number'];
        for (_i = 0, _len = types.length; _i < _len; _i++) {
          type = types[_i];
          if (e.target.classList.contains("row-" + type)) {
            break;
          }
        }
        details = {
          name: '',
          type: type
        };
      } else {
        details = e;
      }
      if (details.type === 'number') {
        details.number = this.count++;
      }
      return this.rows.create(details);
    };

    Table.prototype.keydown = function(e) {
      var $row, type;
      switch (e.keyCode) {
        case 9:
          $row = $(e.target).parent();
          if ($row.is(':last-child')) {
            e.preventDefault();
            type = $row.data('item').type === 'bullet' ? 'bullet' : 'number';
            return this.createRow({
              type: type
            });
          }
          break;
        case 38:
          return $(e.target).parent().prev('li').find('input').focus();
        case 40:
          return $(e.target).parent().next('li').find('input').focus();
      }
    };

    return Table;

  })(Base.Controller);

  module.exports = Table;

}).call(this);
