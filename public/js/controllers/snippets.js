// Generated by CoffeeScript 1.6.3
(function() {
  var $, Base, Snippet, Snippets, Template,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Snippet = require('../models/snippet');

  Template = require('../libs/template');

  $ = require('jqueryify');

  Snippets = (function(_super) {
    __extends(Snippets, _super);

    Snippets.prototype.template = new Template('snippet');

    Snippets.prototype.elements = {
      'ul': 'list'
    };

    Snippets.prototype.events = {
      'click .delete': 'deleteSnippet',
      'click .snippet': 'loadSnippet',
      'click .new-snippet': 'createSnippet'
    };

    function Snippets() {
      this.loadSnippet = __bind(this.loadSnippet, this);
      this.createSnippet = __bind(this.createSnippet, this);
      this.deleteSnippet = __bind(this.deleteSnippet, this);
      this.remove = __bind(this.remove, this);
      this.addOne = __bind(this.addOne, this);
      this.render = __bind(this.render, this);
      Snippets.__super__.constructor.apply(this, arguments);
      this.model = new Snippet();
      this.model.on('create:model', this.addOne);
      this.model.on('destroy:model', this.remove);
      this.model.on('refresh', this.render);
    }

    Snippets.prototype.render = function() {
      var _this = this;
      this.model.forEach(function(snippet) {
        return _this.addOne(snippet);
      });
      return this;
    };

    Snippets.prototype.addOne = function(snippet) {
      var view;
      view = $(this.template.render(snippet));
      this.list.append(view);
      snippet.view = view;
      return view.data('item', snippet);
    };

    Snippets.prototype.remove = function(snippet) {
      return snippet.view.remove();
    };

    Snippets.prototype.deleteSnippet = function(e) {
      var snippet;
      e.stopPropagation();
      if (!window.confirm('Are you sure you want to delete that snippet?')) {
        return;
      }
      snippet = $(e.currentTarget).parent().data('item');
      return snippet.destroy();
    };

    Snippets.prototype.createSnippet = function() {
      var name, snippet;
      name = window.prompt('Enter Snippet');
      if (!name) {
        return;
      }
      snippet = this.model.create({
        content: name
      });
      return this.trigger('save:snippet', snippet);
    };

    Snippets.prototype.loadSnippet = function(e) {
      var snippet;
      snippet = $(e.currentTarget).data('item');
      return this.trigger('load:snippet', snippet);
    };

    return Snippets;

  })(Base.View);

  module.exports = Snippets;

}).call(this);
