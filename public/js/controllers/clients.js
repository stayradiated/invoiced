// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Client, Clients,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Client = require('../models/client');

  Clients = (function(_super) {
    __extends(Clients, _super);

    Clients.prototype.elements = {
      '.client-name': 'name',
      '.client-address': 'address',
      '.client-city': 'city',
      '.client-postcode': 'postcode'
    };

    Clients.prototype.events = {
      'change input': 'update'
    };

    function Clients() {
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      Clients.__super__.constructor.apply(this, arguments);
      this.model = new Client();
      this.model.on('refresh', this.render);
    }

    Clients.prototype.update = function(e) {
      var name, value;
      name = this.elements['.' + e.target.className];
      value = e.target.value;
      return this.model[name] = value;
    };

    Clients.prototype.render = function() {
      var name, selector, _ref;
      _ref = this.elements;
      for (selector in _ref) {
        name = _ref[selector];
        this[name].val(this.model[name]);
      }
      return this;
    };

    return Clients;

  })(Base.Controller);

  module.exports = Clients;

}).call(this);
