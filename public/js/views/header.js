// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Header,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Header = (function(_super) {
    __extends(Header, _super);

    Header.prototype.ui = {
      save: '.button-save'
    };

    Header.prototype.events = {
      'click .button-generate': 'generate',
      'click .button-new': 'createInvoice',
      'click .button-open': 'openInvoice',
      'click .button-save': 'saveInvoice'
    };

    function Header() {
      this.saveInvoice = __bind(this.saveInvoice, this);
      this.openInvoice = __bind(this.openInvoice, this);
      this.createInvoice = __bind(this.createInvoice, this);
      this.generate = __bind(this.generate, this);
      this.resetStatus = __bind(this.resetStatus, this);
      this.markChanged = __bind(this.markChanged, this);
      Header.__super__.constructor.apply(this, arguments);
      this.detect.details.on('change', this.markChanged);
      this.detect.table.on('create:model change:model destroy:model', this.markChanged);
      this.detect.details.on('refresh', this.resetStatus);
      this.pending = false;
    }

    Header.prototype.markChanged = function() {
      this.pending = true;
      return this.ui.save.addClass('pending');
    };

    Header.prototype.resetStatus = function() {
      this.pending = false;
      return this.ui.save.removeClass('pending');
    };

    Header.prototype.generate = function() {
      return this.trigger('generate');
    };

    Header.prototype.createInvoice = function() {
      if (!this.pending || window.confirm("Are you sure you want to create a new invoice?\nYou will lose any unsaved changes to the current invoice.")) {
        return this.trigger('create');
      }
    };

    Header.prototype.openInvoice = function() {
      if (!this.pending || window.confirm('Are you sure? You will lose any unsaved changes to the current invoice.')) {
        return this.trigger('open');
      }
    };

    Header.prototype.saveInvoice = function() {
      return this.trigger('save');
    };

    return Header;

  })(Base.View);

  module.exports = Header;

}).call(this);
