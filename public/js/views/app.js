// Generated by CoffeeScript 1.6.3
(function() {
  var App, Base, Clients, CreateClient, Details, Header, Records, Search, Snippets, Storage, Table, docx, fs, storage, swig,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require('fs');

  swig = require('swig');

  Base = require('base');

  docx = require('../libs/docx');

  Storage = require('../libs/storage');

  Table = require('../views/table');

  Search = require('../views/search');

  Header = require('../views/header');

  Details = require('../views/details');

  Clients = require('../views/clients');

  Snippets = require('../views/snippets');

  CreateClient = require('../views/createClient');

  Records = require('../views/records');

  storage = global.storage = new Storage();

  storage.on('error', function(err, message) {
    console.log('Showing error window');
    return console.log('Error message:', message);
  });

  App = (function(_super) {
    __extends(App, _super);

    App.prototype.ui = {
      header: 'header',
      table: '.table',
      search: '.search',
      details: '.details',
      snippets: '.snippets',
      file: '#save-file',
      clientDetails: '.client-details',
      createClient: '.create-client',
      records: '.invoice-records'
    };

    App.prototype.events = {
      'click .toggle-sidebar': 'toggleSnippets',
      'click .toggle-create-client': 'toggleCreateClient',
      'click .show-records': 'showRecords'
    };

    function App() {
      this.saveInvoice = __bind(this.saveInvoice, this);
      this.openInvoice = __bind(this.openInvoice, this);
      this.createInvoice = __bind(this.createInvoice, this);
      this.setupSearch = __bind(this.setupSearch, this);
      this.setupHeader = __bind(this.setupHeader, this);
      this.showRecords = __bind(this.showRecords, this);
      this.toggleCreateClient = __bind(this.toggleCreateClient, this);
      this.toggleSnippets = __bind(this.toggleSnippets, this);
      this.setupCreateClient = __bind(this.setupCreateClient, this);
      this.setupSnippets = __bind(this.setupSnippets, this);
      this.buildDoc = __bind(this.buildDoc, this);
      this.saveFile = __bind(this.saveFile, this);
      App.__super__.constructor.apply(this, arguments);
      this.storage = storage;
      storage.start();
      this.ui.table = new Table({
        el: this.ui.table
      });
      this.ui.details = new Details({
        el: this.ui.details
      });
      this.ui.clientDetails = new Clients({
        el: this.ui.clientDetails
      });
      this.ui.records = new Records({
        el: this.ui.records
      });
      this.setupSearch(this.ui.search);
      this.setupCreateClient(this.ui.createClient);
      this.setupSnippets(this.ui.snippets);
      this.setupHeader(this.ui.header);
      this.ui.search.search();
      this.ui.file.on('change', this.saveFile);
    }

    App.prototype.saveFile = function(e) {
      var extension, path;
      path = e.target.value;
      extension = '.docx';
      if (path.slice(-5) !== extension) {
        path += extension;
      }
      return this.buildDoc(path);
    };

    App.prototype.buildDoc = function(path) {
      return docx(path, {
        client: this.ui.clientDetails.model["export"](),
        invoice: this.ui.details.model["export"](),
        rows: this.ui.table.model["export"]()
      });
    };

    App.prototype.setupSnippets = function(el) {
      var model,
        _this = this;
      this.ui.snippets = new Snippets({
        el: el
      });
      model = this.ui.snippets.model;
      storage.getSnippets().then(function(array) {
        return model.refresh(array, true);
      });
      model.on('before:destroy:model', storage.deleteSnippet);
      this.ui.snippets.on('save:snippet', storage.saveSnippet);
      return this.ui.snippets.on('load:snippet', function(snippet) {
        return _this.ui.table.autoCreateRow(snippet.content);
      });
    };

    App.prototype.setupCreateClient = function(el) {
      console.log('creating a new client', this);
      this.ui.createClient = new CreateClient({
        el: el
      });
      this.ui.createClient.on('toggle', this.toggleCreateClient);
      return this.ui.createClient.on('refresh', this.ui.search.refresh);
    };

    App.prototype.toggleSnippets = function() {
      return this.el.toggleClass('no-snippets');
    };

    App.prototype.toggleCreateClient = function() {
      return this.el.toggleClass('no-create-client');
    };

    App.prototype.showRecords = function() {
      return this.ui.records.show();
    };

    App.prototype.setupHeader = function(el) {
      var _this = this;
      this.ui.header = new Header({
        el: el,
        detect: {
          details: this.ui.details.model,
          table: this.ui.table.model
        }
      });
      this.ui.header.on('generate', function() {
        return _this.ui.file.click();
      });
      this.ui.header.on('open', function() {
        return _this.ui.search.show();
      });
      this.ui.header.on('create', this.createInvoice);
      return this.ui.header.on('save', function() {
        if (_this.ui.details.model.unsaved) {
          return storage.invoiceExists(_this.ui.details.model.id).then(function(results) {
            if (results[0].count > 0) {
              return window.alert('An invoice already exists with that ID, please choose another one');
            } else {
              return _this.saveInvoice();
            }
          });
        } else {
          return _this.saveInvoice();
        }
      });
    };

    App.prototype.setupSearch = function(el) {
      this.ui.search = new Search({
        el: el
      });
      this.ui.search.on('select:invoice', this.openInvoice);
      this.ui.search.on('create:client', this.ui.createClient);
      return this.ui.search.on('create:invoice', this.createInvoice);
    };

    App.prototype.createInvoice = function(client) {
      if (client == null) {
        client = this.ui.clientDetails.model;
      }
      this.ui.details.model.refresh({
        clientId: client.id,
        customer: client.name,
        site: client.address
      }, true);
      this.ui.details.model.unsaved = true;
      this.ui.clientDetails.model.refresh(client, true);
      return this.ui.table.model.refresh({}, true);
    };

    App.prototype.openInvoice = function(client, invoice, table) {
      console.log('refreshing clientdetails');
      this.ui.clientDetails.model.refresh(client, true);
      console.log('refreshing details', this.ui.details.model, invoice);
      this.ui.details.model.refresh(invoice, true);
      console.log('setting model unsaved');
      this.ui.details.model.unsaved = false;
      console.log('refreshing table model');
      return this.ui.table.model.refresh(table, true);
    };

    App.prototype.saveInvoice = function() {
      storage.saveInvoice({
        invoice: this.ui.details.model.toJSON(),
        rows: this.ui.table.model.toJSON()
      });
      this.ui.details.model.unsaved = false;
      return this.ui.header.resetStatus();
    };

    return App;

  })(Base.View);

  module.exports = App;

}).call(this);
