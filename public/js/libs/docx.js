// Generated by CoffeeScript 1.6.3
(function() {
  var When, compile, config, content, escape, fs, loadFiles, loaded, merge, readFile, templates, tmpl, zip,
    __hasProp = {}.hasOwnProperty;

  fs = require('fs');

  zip = require('./zip');

  When = require('when');

  merge = function(to, from) {
    var key, val, _results;
    _results = [];
    for (key in from) {
      if (!__hasProp.call(from, key)) continue;
      val = from[key];
      _results.push(to[key] = val);
    }
    return _results;
  };

  tmpl = function(template, namespace) {
    var fn;
    fn = function(existing, fieldName) {
      var content;
      content = namespace[fieldName];
      if (content == null) {
        content = existing;
      }
      return escape(content);
    };
    return template.replace(/Z([A-Za-z0-9_|.]*)X/g, fn);
  };

  escape = function(text) {
    if (typeof text !== 'string') {
      text = text.toString();
    }
    return text.replace(/&(?!amp;)/g, '&amp;');
  };

  config = {};

  config.docs = __dirname + '/../../../docs/';

  config.folder = config.docs + 'template/';

  config.template = config.folder + 'word/document.xml';

  templates = {
    document: config.docs + 'document.xml.tmpl',
    rowNumber: config.docs + 'row.number.xml.tmpl',
    rowBullet: config.docs + 'row.bullet.xml.tmpl',
    rowHeading: config.docs + 'row.heading.xml.tmpl',
    rowLabour: config.docs + 'row.labour.xml.tmpl',
    rowAirMover: config.docs + 'row.airmover.xml.tmpl'
  };

  content = {};

  loaded = false;

  readFile = function(name, path) {
    var deferred;
    deferred = When.defer();
    fs.readFile(path, function(err, contents) {
      if (err) {
        console.error(err);
        return deferred.reject(err);
      }
      return deferred.resolve([name, contents.toString()]);
    });
    return deferred.promise;
  };

  loadFiles = function(fn) {
    var file, path, requests;
    requests = [];
    for (file in templates) {
      path = templates[file];
      requests.push(readFile(file, path));
    }
    return When.all(requests, function(contents) {
      var text, _i, _len, _ref;
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        _ref = contents[_i], file = _ref[0], text = _ref[1];
        content[file] = text;
      }
      loaded = true;
      if (fn) {
        return fn();
      }
    });
  };

  compile = function(path, _arg) {
    var args, client, data, invoice, jobDate, output, row, rows, startDate, _i, _len;
    client = _arg.client, invoice = _arg.invoice, rows = _arg.rows;
    if (!loaded) {
      args = arguments;
      return loadFiles(function() {
        return compile.apply(this, args);
      });
    }
    data = {};
    data.rows = "";
    startDate = '';
    jobDate = '';
    for (_i = 0, _len = rows.length; _i < _len; _i++) {
      row = rows[_i];
      row.jobDate = jobDate;
      switch (row.type) {
        case 'heading':
          data.rows += tmpl(content.rowHeading, row);
          break;
        case 'number':
          data.rows += tmpl(content.rowNumber, row);
          break;
        case 'bullet':
          data.rows += tmpl(content.rowBullet, row);
          break;
        case 'section':
          jobDate = row.name;
          if (startDate === '') {
            startDate = jobDate;
          }
      }
      if (row.type !== 'section') {
        jobDate = '';
      }
    }
    data.jobDate = startDate;
    if (invoice.labour !== '0.00') {
      data.rows += tmpl(content.rowLabour, {
        cost: invoice.labour
      });
    }
    delete invoice.labour;
    if (invoice.airmover !== '0.00') {
      data.rows += tmpl(content.rowAirMover, {
        cost: invoice.airmover
      });
    }
    delete invoice.airmover;
    merge(data, client);
    merge(data, invoice);
    output = tmpl(content.document, data);
    return fs.writeFile(config.template, output, function(err) {
      return zip(config.folder, path);
    });
  };

  module.exports = compile;

}).call(this);
