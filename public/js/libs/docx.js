// Generated by CoffeeScript 1.6.3
(function() {
  var When, compile, config, content, fs, loadFiles, loaded, readFile, templates, tmpl, zip;

  fs = require('fs');

  zip = require('./zip');

  When = require('when');

  tmpl = function(template, namespace) {
    var fn;
    fn = function(existing, fieldName) {
      var content, field, fields, i, last, next, value, _i, _len;
      fields = fieldName.split('.');
      next = namespace;
      last = fields.length - 1;
      for (i = _i = 0, _len = fields.length; _i < _len; i = ++_i) {
        field = fields[i];
        value = next[field];
        if (i === last) {
          content = value;
        } else {
          next = value;
        }
      }
      if (content == null) {
        content = existing;
      }
      return content;
    };
    return template.replace(/\{{2}([A-Za-z0-9_|.]*)\}{2}/g, fn);
  };

  config = {};

  config.docs = __dirname + '/../../../docs/';

  config.folder = config.docs + 'template/';

  config.template = config.folder + 'word/document.xml';

  templates = {
    document: config.docs + 'document.xml.tmpl',
    rowNumber: config.docs + 'row.number.xml.tmpl',
    rowBullet: config.docs + 'row.bullet.xml.tmpl',
    rowHeading: config.docs + 'row.heading.xml.tmpl'
  };

  content = {};

  loaded = false;

  readFile = function(name, path) {
    var deferred;
    deferred = When.defer();
    fs.readFile(path, function(err, contents) {
      if (err) {
        return deferred.reject(err);
      }
      return deferred.resolve([name, contents.toString()]);
    });
    return deferred.promise;
  };

  loadFiles = function(fn) {
    var file, path, requests;
    requests = [];
    for (file in templates) {
      path = templates[file];
      requests.push(readFile(file, path));
    }
    return When.all(requests, function(contents) {
      var text, _i, _len, _ref;
      for (_i = 0, _len = contents.length; _i < _len; _i++) {
        _ref = contents[_i], file = _ref[0], text = _ref[1];
        content[file] = text;
      }
      loaded = true;
      if (fn) {
        return fn();
      }
    });
  };

  compile = function(path, details, table) {
    var args, jobDate, output, row, startDate, _i, _len;
    if (details == null) {
      details = {};
    }
    if (table == null) {
      table = [];
    }
    if (!loaded) {
      args = arguments;
      return loadFiles(function() {
        return compile.apply(this, args);
      });
    }
    details.rows = "";
    startDate = '';
    jobDate = '';
    for (_i = 0, _len = table.length; _i < _len; _i++) {
      row = table[_i];
      row.jobDate = jobDate;
      switch (row.type) {
        case 'heading':
          details.rows += tmpl(content.rowHeading, row);
          break;
        case 'number':
          details.rows += tmpl(content.rowNumber, row);
          break;
        case 'bullet':
          details.rows += tmpl(content.rowBullet, row);
          break;
        case 'section':
          jobDate = row.name;
          if (startDate === '') {
            startDate = jobDate;
          }
      }
      if (row.type !== 'section') {
        jobDate = '';
      }
    }
    details.jobDate = startDate;
    output = tmpl(content.document, details);
    return fs.writeFile(config.template, output, function(err) {
      return zip(config.folder, path);
    });
  };

  module.exports = compile;

}).call(this);
