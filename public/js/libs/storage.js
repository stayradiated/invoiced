// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Storage, mysql,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('../libs/base');

  mysql = require('mysql');

  Storage = (function(_super) {
    __extends(Storage, _super);

    function Storage() {
      this.getRows = __bind(this.getRows, this);
      this.getInvoice = __bind(this.getInvoice, this);
      this.getInvoices = __bind(this.getInvoices, this);
      this.getClient = __bind(this.getClient, this);
      this.searchClients = __bind(this.searchClients, this);
      this.getClients = __bind(this.getClients, this);
      this.saveInvoice = __bind(this.saveInvoice, this);
      this.end = __bind(this.end, this);
      this.start = __bind(this.start, this);
      Storage.__super__.constructor.apply(this, arguments);
      this.db = mysql.createConnection({
        host: '127.0.0.1',
        user: 'nodejs',
        password: 'nodejs',
        database: 'invoicer'
      });
    }

    Storage.prototype.start = function() {
      var _this = this;
      return this.db.connect(function(err) {
        if (err) {
          return _this.trigger('error', err, 'Could not connect to database');
        } else {
          return _this.trigger('connected');
        }
      });
    };

    Storage.prototype.end = function() {
      return this.db.end();
    };

    Storage.prototype.saveInvoice = function(_arg) {
      var client, details, invoice, row, rowKey, table, _i, _len, _results,
        _this = this;
      details = _arg.details, table = _arg.table;
      client = {
        name: details.clientName,
        address: details.clientAddress,
        city: details.clientCity,
        postcode: details.clientPostcode
      };
      invoice = {
        id: details.invoiceId,
        date: details.invoiceDate,
        customer: details.jobCustomer,
        site: details.jobSite,
        cost: details.jobAmount,
        paid: false
      };
      rowKey = {
        invoiceId: details.invoiceId
      };
      this.db.query('INSERT INTO clients SET ?', client, function(err, result) {
        if (err) {
          console.error(err);
        }
        invoice.clientId = result.insertId;
        return _this.db.query('INSERT INTO invoices SET ?', invoice, function(err, result) {
          if (err) {
            return console.error(err);
          }
        });
      });
      _results = [];
      for (_i = 0, _len = table.length; _i < _len; _i++) {
        row = table[_i];
        _results.push(this.db.query('INSERT INTO rows SET ?', row, function(err, result) {
          if (err) {
            console.error(err);
          }
          rowKey.rowId = result.insertId;
          return _this.db.query('INSERT INTO tables SET ?', rowKey, function(err, result) {
            if (err) {
              return console.error(err);
            }
          });
        }));
      }
      return _results;
    };

    Storage.prototype.getClients = function(fn) {
      return this.db.query('SELECT * FROM clients', fn);
    };

    Storage.prototype.searchClients = function(query, fn) {
      return this.db.query("SELECT * FROM clients WHERE\nname LIKE '%" + query + "%' OR\naddress LIKE '%" + query + "%' OR\ncity LIKE '%" + query + "%' OR\npostcode LIKE '%" + query + "%'", fn);
    };

    Storage.prototype.getClient = function(id, fn) {
      return this.db.query('SELECT * FROM clients WHERE id=?', id, fn);
    };

    Storage.prototype.getInvoices = function() {
      return this.db.query('SELECT * FROM invoices', fn);
    };

    Storage.prototype.getInvoice = function(id, fn) {
      return this.db.query('SELECT * FROM invoices WHERE id=?', id, fn);
    };

    Storage.prototype.getRows = function(invoiceId, fn) {
      return this.db.query('SELECT rows.* FROM tables INNER JOIN rows ON tables.rowId=rows.id WHERE invoiceId=?', invoiceId, fn);
    };

    return Storage;

  })(Base.Event);

  module.exports = Storage;

}).call(this);
