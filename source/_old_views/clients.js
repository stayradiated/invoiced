// Generated by CoffeeScript 1.7.1
(function() {
  var Base, Client, Clients,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  Client = require('../models/client');

  Clients = (function(_super) {
    __extends(Clients, _super);

    Clients.prototype.ui = {
      name: '.client-name',
      address: '.client-address',
      city: '.client-city',
      postcode: '.client-postcode'
    };

    Clients.prototype.events = {
      'change input': 'update',
      'submit': 'submit'
    };

    function Clients() {
      this.submit = __bind(this.submit, this);
      this.render = __bind(this.render, this);
      this.update = __bind(this.update, this);
      var el, name, _ref;
      Clients.__super__.constructor.apply(this, arguments);
      this.model = new Client();
      this.model.on('refresh', this.render);
      _ref = this.ui;
      for (name in _ref) {
        el = _ref[name];
        el.itemName = name;
      }
    }

    Clients.prototype.update = function(e) {
      var el, name, value;
      el = e.target;
      name = el.itemName;
      value = el.value;
      return this.model[name] = value;
    };

    Clients.prototype.render = function() {
      var name;
      for (name in this.elements) {
        this[name].html(this.model[name]);
      }
      return this;
    };

    Clients.prototype.submit = function(e) {
      return e.preventDefault();
    };

    return Clients;

  })(Base.View);

  module.exports = Clients;

}).call(this);
